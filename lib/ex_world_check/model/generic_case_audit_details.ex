# NOTE: This file is auto generated by OpenAPI Generator 7.13.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ExWorldCheck.Model.GenericCaseAuditDetails do
  @moduledoc """
  Audit details for NEW_CASE, DELETE_CASE or EDITED_CASE actions raised when a Case is first created, deleted or edited. Extends [AbstractAuditDetails](#AbstractAuditDetails). 
  """

  @derive JSON.Encoder
  defstruct [
    :detailsType,
    :batchDetails,
    :caseSystemId,
    :caseId,
    :caseName,
    :entityType,
    :updateDate,
    :createDate,
    :groupName,
    :nameTransposition,
    :gender,
    :country,
    :nationality,
    :placeOfBirth,
    :dateOfBirth,
    :countryOfResidence,
    :countryOfRegistration,
    :imoNumber,
    :givenName,
    :lastName,
    :passportGender,
    :issuingState,
    :passportNationality,
    :passportDateOfBirth,
    :documentType,
    :idNumber,
    :customFields,
    :expirationDate,
    :idInformation
  ]

  @type t :: %__MODULE__{
          :detailsType => String.t(),
          :batchDetails => [ExWorldCheck.Model.BatchDetail.t()] | nil,
          :caseSystemId => String.t(),
          :caseId => String.t() | nil,
          :caseName => String.t(),
          :entityType => String.t(),
          :updateDate => DateTime.t(),
          :createDate => DateTime.t(),
          :groupName => String.t(),
          :nameTransposition => ExWorldCheck.Model.TypeAvailableSelected.t() | nil,
          :gender => String.t() | nil,
          :country => String.t() | nil,
          :nationality => String.t() | nil,
          :placeOfBirth => String.t() | nil,
          :dateOfBirth => Date.t() | nil,
          :countryOfResidence => String.t() | nil,
          :countryOfRegistration => String.t() | nil,
          :imoNumber => String.t() | nil,
          :givenName => String.t() | nil,
          :lastName => String.t() | nil,
          :passportGender => String.t() | nil,
          :issuingState => String.t() | nil,
          :passportNationality => String.t() | nil,
          :passportDateOfBirth => Date.t() | nil,
          :documentType => String.t() | nil,
          :idNumber => String.t() | nil,
          :customFields => %{optional(String.t()) => String.t()} | nil,
          :expirationDate => Date.t() | nil,
          :idInformation => String.t() | nil
        }

  alias ExWorldCheck.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:batchDetails, :list, ExWorldCheck.Model.BatchDetail)
    |> Deserializer.deserialize(
      :nameTransposition,
      :struct,
      ExWorldCheck.Model.TypeAvailableSelected
    )
  end
end
