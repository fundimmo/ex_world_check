# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ExWorldCheck.Model.Case do
  @moduledoc """
  Defines full Case data returned when retrieving a Case. Extends [NewCase](#NewCase).
  """

  @derive [Poison.Encoder]
  defstruct [
    :caseId,
    :name,
    :providerTypes,
    :customFields,
    :secondaryFields,
    :nameTransposition,
    :note,
    :groupId,
    :entityType,
    :caseSystemId,
    :caseScreeningState,
    :lifecycleState,
    :assignee,
    :creator,
    :modifier,
    :creationDate,
    :modificationDate,
    :outstandingActions,
    :lastScreenedDatesByProviderType,
    :providerTypeDetails,
    :aggregatedResultSummaries
  ]

  @type t :: %__MODULE__{
          :caseId => String.t() | nil,
          :name => String.t(),
          :providerTypes => [ExWorldCheck.Model.ProviderType.t()],
          :customFields => [ExWorldCheck.Model.Field.t()] | nil,
          :secondaryFields => [ExWorldCheck.Model.Field.t()] | nil,
          :nameTransposition => boolean() | nil,
          :note => String.t() | nil,
          :groupId => String.t(),
          :entityType => String.t(),
          :caseSystemId => String.t() | nil,
          :caseScreeningState => %{optional(String.t()) => String.t()} | nil,
          :lifecycleState => String.t() | nil,
          :assignee => ExWorldCheck.Model.UserSummary.t() | nil,
          :creator => ExWorldCheck.Model.UserSummary.t() | nil,
          :modifier => ExWorldCheck.Model.UserSummary.t() | nil,
          :creationDate => DateTime.t() | nil,
          :modificationDate => DateTime.t() | nil,
          :outstandingActions => boolean() | nil,
          :lastScreenedDatesByProviderType => %{optional(String.t()) => DateTime.t()} | nil,
          :providerTypeDetails => ExWorldCheck.Model.ProviderTypeDetails.t() | nil,
          :aggregatedResultSummaries => ExWorldCheck.Model.CaseResultSummaries.t() | nil
        }
end

defimpl Poison.Decoder, for: ExWorldCheck.Model.Case do
  import ExWorldCheck.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:providerTypes, :list, ExWorldCheck.Model.ProviderType, options)
    |> deserialize(:customFields, :list, ExWorldCheck.Model.Field, options)
    |> deserialize(:secondaryFields, :list, ExWorldCheck.Model.Field, options)
    |> deserialize(:assignee, :struct, ExWorldCheck.Model.UserSummary, options)
    |> deserialize(:creator, :struct, ExWorldCheck.Model.UserSummary, options)
    |> deserialize(:modifier, :struct, ExWorldCheck.Model.UserSummary, options)
    |> deserialize(:providerTypeDetails, :struct, ExWorldCheck.Model.ProviderTypeDetails, options)
    |> deserialize(
      :aggregatedResultSummaries,
      :struct,
      ExWorldCheck.Model.CaseResultSummaries,
      options
    )
  end
end
