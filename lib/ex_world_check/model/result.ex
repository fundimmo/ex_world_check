# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ExWorldCheck.Model.Result do
  @moduledoc """
  Result found after performing a synchronous screening of a Case. This contains the abstract case screening result details plus includes identity documents and important events 
  """

  @derive [Poison.Encoder]
  defstruct [
    :resultId,
    :referenceId,
    :matchStrength,
    :matchScore,
    :matchedTerm,
    :matchedTerms,
    :submittedTerm,
    :matchedNameType,
    :secondaryFieldResults,
    :sources,
    :categories,
    :creationDate,
    :modificationDate,
    :lastAlertDate,
    :modifier,
    :resolution,
    :resultReview,
    :primaryName,
    :events,
    :countryLinks,
    :identityDocuments,
    :category,
    :providerType,
    :gender,
    :entityCreationDate,
    :entityModificationDate,
    :pepStatus,
    :actionTypes
  ]

  @type t :: %__MODULE__{
          :resultId => String.t() | nil,
          :referenceId => String.t(),
          :matchStrength => String.t() | nil,
          :matchScore => float() | nil,
          :matchedTerm => String.t() | nil,
          :matchedTerms => [ExWorldCheck.Model.MatchedTerm.t()] | nil,
          :submittedTerm => String.t() | nil,
          :matchedNameType => String.t() | nil,
          :secondaryFieldResults => [ExWorldCheck.Model.SecondaryFieldResult.t()] | nil,
          :sources => [String.t()] | nil,
          :categories => [String.t()] | nil,
          :creationDate => DateTime.t() | nil,
          :modificationDate => DateTime.t() | nil,
          :lastAlertDate => DateTime.t() | nil,
          :modifier => ExWorldCheck.Model.UserSummary.t() | nil,
          :resolution => ExWorldCheck.Model.Resolution.t() | nil,
          :resultReview => ExWorldCheck.Model.Review.t() | nil,
          :primaryName => String.t() | nil,
          :events => [ExWorldCheck.Model.Event.t()] | nil,
          :countryLinks => [ExWorldCheck.Model.CountryLink.t()] | nil,
          :identityDocuments => [ExWorldCheck.Model.IdentityDocument.t()] | nil,
          :category => String.t() | nil,
          :providerType => String.t() | nil,
          :gender => String.t() | nil,
          :entityCreationDate => DateTime.t() | nil,
          :entityModificationDate => DateTime.t() | nil,
          :pepStatus => String.t() | nil,
          :actionTypes => [String.t()] | nil
        }
end

defimpl Poison.Decoder, for: ExWorldCheck.Model.Result do
  import ExWorldCheck.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:matchedTerms, :list, ExWorldCheck.Model.MatchedTerm, options)
    |> deserialize(
      :secondaryFieldResults,
      :list,
      ExWorldCheck.Model.SecondaryFieldResult,
      options
    )
    |> deserialize(:modifier, :struct, ExWorldCheck.Model.UserSummary, options)
    |> deserialize(:resolution, :struct, ExWorldCheck.Model.Resolution, options)
    |> deserialize(:resultReview, :struct, ExWorldCheck.Model.Review, options)
    |> deserialize(:events, :list, ExWorldCheck.Model.Event, options)
    |> deserialize(:countryLinks, :list, ExWorldCheck.Model.CountryLink, options)
    |> deserialize(:identityDocuments, :list, ExWorldCheck.Model.IdentityDocument, options)
  end
end
