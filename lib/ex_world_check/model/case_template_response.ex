# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ExWorldCheck.Model.CaseTemplateResponse do
  @moduledoc """
  Case template, containing metadata required by the client to construct a valid Case
  """

  @derive [Poison.Encoder]
  defstruct [
    :groupScreeningType,
    :groupId,
    :customFields,
    :secondaryFieldsByProvider,
    :mandatoryProviderTypes
  ]

  @type t :: %__MODULE__{
          :groupScreeningType => ExWorldCheck.Model.GroupScreeningType.t(),
          :groupId => String.t(),
          :customFields => [ExWorldCheck.Model.FieldDefinition.t()] | nil,
          :secondaryFieldsByProvider =>
            %{optional(String.t()) => ExWorldCheck.Model.SecondaryFieldsByEntity.t()} | nil,
          :mandatoryProviderTypes => [ExWorldCheck.Model.ProviderType.t()] | nil
        }
end

defimpl Poison.Decoder, for: ExWorldCheck.Model.CaseTemplateResponse do
  import ExWorldCheck.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:groupScreeningType, :struct, ExWorldCheck.Model.GroupScreeningType, options)
    |> deserialize(:customFields, :list, ExWorldCheck.Model.FieldDefinition, options)
    |> deserialize(
      :secondaryFieldsByProvider,
      :map,
      ExWorldCheck.Model.SecondaryFieldsByEntity,
      options
    )
    |> deserialize(:mandatoryProviderTypes, :list, ExWorldCheck.Model.ProviderType, options)
  end
end
