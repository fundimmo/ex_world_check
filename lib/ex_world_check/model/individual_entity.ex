# NOTE: This file is auto generated by OpenAPI Generator 6.4.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ExWorldCheck.Model.IndividualEntity do
  @moduledoc """

  """

  @derive [Poison.Encoder]
  defstruct [
    :actions,
    :active,
    :addresses,
    :associates,
    :category,
    :comments,
    :contacts,
    :countryLinks,
    :creationDate,
    :deletionDate,
    :description,
    :details,
    :entityId,
    :externalImportId,
    :files,
    :identityDocuments,
    :images,
    :lastAdjunctChangeDate,
    :modificationDate,
    :names,
    :previousCountryLinks,
    :provider,
    :sourceDescription,
    :sourceUris,
    :sources,
    :subCategory,
    :updateCategory,
    :updatedDates,
    :weblinks,
    :age,
    :ageAsOfDate,
    :events,
    :gender,
    :isDeceased,
    :previousRoles,
    :roles,
    :entityType
  ]

  @type t :: %__MODULE__{
          :actions => [ExWorldCheck.Model.ActionDetail.t()] | nil,
          :active => boolean() | nil,
          :addresses => [ExWorldCheck.Model.Address.t()] | nil,
          :associates => [ExWorldCheck.Model.AbstractAssociate.t()] | nil,
          :category => String.t() | nil,
          :comments => String.t() | nil,
          :contacts => [ExWorldCheck.Model.ContactDetail.t()] | nil,
          :countryLinks => [ExWorldCheck.Model.CountryLink.t()] | nil,
          :creationDate => DateTime.t(),
          :deletionDate => DateTime.t() | nil,
          :description => String.t() | nil,
          :details => [ExWorldCheck.Model.Detail.t()] | nil,
          :entityId => String.t(),
          :externalImportId => String.t(),
          :files => [ExWorldCheck.Model.FileMeta.t()] | nil,
          :identityDocuments => [ExWorldCheck.Model.IdentityDocument.t()] | nil,
          :images => [ExWorldCheck.Model.Image.t()] | nil,
          :lastAdjunctChangeDate => DateTime.t() | nil,
          :modificationDate => DateTime.t() | nil,
          :names => [ExWorldCheck.Model.Name.t()],
          :previousCountryLinks => [ExWorldCheck.Model.CountryLink.t()] | nil,
          :provider => ExWorldCheck.Model.Provider.t() | nil,
          :sourceDescription => String.t() | nil,
          :sourceUris => [String.t()] | nil,
          :sources => [ExWorldCheck.Model.ProviderSource.t()],
          :subCategory => String.t() | nil,
          :updateCategory => String.t() | nil,
          :updatedDates => ExWorldCheck.Model.EntityUpdatedDates.t() | nil,
          :weblinks => [ExWorldCheck.Model.Weblink.t()] | nil,
          :age => String.t() | nil,
          :ageAsOfDate => DateTime.t() | nil,
          :events => [ExWorldCheck.Model.Event.t()] | nil,
          :gender => ExWorldCheck.Model.Gender.t() | nil,
          :isDeceased => boolean() | nil,
          :previousRoles => [ExWorldCheck.Model.Role.t()] | nil,
          :roles => [ExWorldCheck.Model.Role.t()] | nil,
          :entityType => String.t() | nil
        }
end

defimpl Poison.Decoder, for: ExWorldCheck.Model.IndividualEntity do
  import ExWorldCheck.Deserializer

  def decode(value, options) do
    value
    |> deserialize(:actions, :list, ExWorldCheck.Model.ActionDetail, options)
    |> deserialize(:addresses, :list, ExWorldCheck.Model.Address, options)
    |> deserialize(:associates, :list, ExWorldCheck.Model.AbstractAssociate, options)
    |> deserialize(:contacts, :list, ExWorldCheck.Model.ContactDetail, options)
    |> deserialize(:countryLinks, :list, ExWorldCheck.Model.CountryLink, options)
    |> deserialize(:details, :list, ExWorldCheck.Model.Detail, options)
    |> deserialize(:files, :list, ExWorldCheck.Model.FileMeta, options)
    |> deserialize(:identityDocuments, :list, ExWorldCheck.Model.IdentityDocument, options)
    |> deserialize(:images, :list, ExWorldCheck.Model.Image, options)
    |> deserialize(:names, :list, ExWorldCheck.Model.Name, options)
    |> deserialize(:previousCountryLinks, :list, ExWorldCheck.Model.CountryLink, options)
    |> deserialize(:provider, :struct, ExWorldCheck.Model.Provider, options)
    |> deserialize(:sources, :list, ExWorldCheck.Model.ProviderSource, options)
    |> deserialize(:updatedDates, :struct, ExWorldCheck.Model.EntityUpdatedDates, options)
    |> deserialize(:weblinks, :list, ExWorldCheck.Model.Weblink, options)
    |> deserialize(:events, :list, ExWorldCheck.Model.Event, options)
    |> deserialize(:gender, :struct, ExWorldCheck.Model.Gender, options)
    |> deserialize(:previousRoles, :list, ExWorldCheck.Model.Role, options)
    |> deserialize(:roles, :list, ExWorldCheck.Model.Role, options)
  end
end
