# NOTE: This file is auto generated by OpenAPI Generator 7.13.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule ExWorldCheck.Model.VesselEntity do
  @moduledoc """

  """

  @derive JSON.Encoder
  defstruct [
    :imo,
    :entityType,
    :actions,
    :active,
    :addresses,
    :associates,
    :category,
    :comments,
    :contacts,
    :countryLinks,
    :creationDate,
    :deletionDate,
    :description,
    :details,
    :entityId,
    :externalImportId,
    :files,
    :identityDocuments,
    :images,
    :lastAdjunctChangeDate,
    :modificationDate,
    :names,
    :previousCountryLinks,
    :provider,
    :sourceDescription,
    :sourceUris,
    :sources,
    :subCategory,
    :updateCategory,
    :updatedDates,
    :weblinks
  ]

  @type t :: %__MODULE__{
          :imo => String.t(),
          :entityType => String.t(),
          :actions => [ExWorldCheck.Model.ActionDetail.t()] | nil,
          :active => boolean() | nil,
          :addresses => [ExWorldCheck.Model.Address.t()] | nil,
          :associates => [ExWorldCheck.Model.AbstractAssociate.t()] | nil,
          :category => String.t() | nil,
          :comments => String.t() | nil,
          :contacts => [ExWorldCheck.Model.ContactDetail.t()] | nil,
          :countryLinks => [ExWorldCheck.Model.CountryLink.t()] | nil,
          :creationDate => DateTime.t(),
          :deletionDate => DateTime.t() | nil,
          :description => String.t() | nil,
          :details => [ExWorldCheck.Model.Detail.t()] | nil,
          :entityId => String.t(),
          :externalImportId => String.t(),
          :files => [ExWorldCheck.Model.FileMeta.t()] | nil,
          :identityDocuments => [ExWorldCheck.Model.IdentityDocument.t()] | nil,
          :images => [ExWorldCheck.Model.Image.t()] | nil,
          :lastAdjunctChangeDate => DateTime.t() | nil,
          :modificationDate => DateTime.t() | nil,
          :names => [ExWorldCheck.Model.Name.t()],
          :previousCountryLinks => [ExWorldCheck.Model.CountryLink.t()] | nil,
          :provider => ExWorldCheck.Model.Provider.t() | nil,
          :sourceDescription => String.t() | nil,
          :sourceUris => [String.t()] | nil,
          :sources => [ExWorldCheck.Model.ProviderSource.t()],
          :subCategory => String.t() | nil,
          :updateCategory => String.t() | nil,
          :updatedDates => ExWorldCheck.Model.EntityUpdatedDates.t() | nil,
          :weblinks => [ExWorldCheck.Model.Weblink.t()] | nil
        }

  alias ExWorldCheck.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:actions, :list, ExWorldCheck.Model.ActionDetail)
    |> Deserializer.deserialize(:addresses, :list, ExWorldCheck.Model.Address)
    |> Deserializer.deserialize(:associates, :list, ExWorldCheck.Model.AbstractAssociate)
    |> Deserializer.deserialize(:contacts, :list, ExWorldCheck.Model.ContactDetail)
    |> Deserializer.deserialize(:countryLinks, :list, ExWorldCheck.Model.CountryLink)
    |> Deserializer.deserialize(:details, :list, ExWorldCheck.Model.Detail)
    |> Deserializer.deserialize(:files, :list, ExWorldCheck.Model.FileMeta)
    |> Deserializer.deserialize(:identityDocuments, :list, ExWorldCheck.Model.IdentityDocument)
    |> Deserializer.deserialize(:images, :list, ExWorldCheck.Model.Image)
    |> Deserializer.deserialize(:names, :list, ExWorldCheck.Model.Name)
    |> Deserializer.deserialize(:previousCountryLinks, :list, ExWorldCheck.Model.CountryLink)
    |> Deserializer.deserialize(:provider, :struct, ExWorldCheck.Model.Provider)
    |> Deserializer.deserialize(:sources, :list, ExWorldCheck.Model.ProviderSource)
    |> Deserializer.deserialize(:updatedDates, :struct, ExWorldCheck.Model.EntityUpdatedDates)
    |> Deserializer.deserialize(:weblinks, :list, ExWorldCheck.Model.Weblink)
  end
end
